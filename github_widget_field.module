<?php

/**
 * @file
 * A field for share github repos and channels using the Field Types API.
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function github_widget_field_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'github_widget' => array(
      'label' => t('Github repository widget'),
      'description' => t('Field that show github repository as widget.'),
      'default_widget' => 'github_widget_form',
      'default_formatter' => 'github_widget_simple_text',
    ),
  );
}

/**
 * Implements hook_field_validate().
 * @see field_example_field_widget_error()
 */
function github_widget_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['repository'])) {
      // drupal_http_request($url);
      if (!isDomainAvailible('https://github.com/' . $item['repository'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'github_widget_invalid',
          'message' => t('Must be a valid github path'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function github_widget_field_field_is_empty($item, $field) {
  if ($field['type'] == 'github_widget') {
    if (empty($item['repository'])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function github_widget_field_field_formatter_info() {
  return array(
    'github_widget_simple_text' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('github_widget'),
    ),
    'github_widget_jquery_formatter' => array(
      'label' => t('Show widget of the repository'),
      'field types' => array('github_widget'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function github_widget_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    // This formatter simply outputs the field as text.
    case 'github_widget_simple_text':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'p',
          '#value' => t('Visit repository: @code', array('@code' => $item['repository'])),
        );
      }
      break;

    // This formatter adds Joel Sutherdlan's widget appearance.
    case 'github_widget_jquery_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => array(
            'class' => 'github-widget',
            'data-repo' => $item['repository'],
          ),
          '#value' => t('github-widget'),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function github_widget_field_field_widget_info() {
  return array(
    'github_widget_form' => array(
      'label' => t('text'),
      'field types' => array('github_widget'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function github_widget_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($instance['widget']['type'] == 'github_widget_form') {
    $widget = $instance['widget'];
    $settings = $widget['settings'];
    $element['repository'] = array(
      '#type' => 'textfield',
      '#title' => t('Github Repository'),
      '#description' => t('This field accepts Github URLs path in the following format: username/repositoryname'),
      '#default_value' => isset($items[$delta]['repository']) ? $items[$delta]['repository'] : '',
    );
  }
  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see form_error()
 */
function github_widget_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'github_widget_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_init().
 */
function github_widget_field_init() {
  $path = libraries_get_path('jquery.githubrepo');
  if ($path) {
    // Do something with the library, knowing the path, for instance:
    drupal_add_js($path . '/jquery.githubRepoWidget.min.js');
  }
}

/**
 * Implements curl call to verify if domain exist.
 * 
 * This function must be replace with drupal function drupal_http_request().
 * 
 * @param string $domain
 *   $domain url as https://github.com/user/repo .
 * 
 * @return bool
 *   Returns true when url exist.
 */
function isDomainAvailible($domain) {
  // Check, if a valid url is provided.
  if (!filter_var($domain, FILTER_VALIDATE_URL)) {
    return FALSE;
  }
  // Initialize curl.
  $curl_init = curl_init($domain);
  curl_setopt($curl_init, CURLOPT_CONNECTTIMEOUT, 10);
  curl_setopt($curl_init, CURLOPT_HEADER, TRUE);
  curl_setopt($curl_init, CURLOPT_NOBODY, TRUE);
  curl_setopt($curl_init, CURLOPT_RETURNTRANSFER, TRUE);
  // Get answer.
  $response = curl_exec($curl_init);
  curl_close($curl_init);
  if ($response) {
    return TRUE;
  }
  return FALSE;
}
